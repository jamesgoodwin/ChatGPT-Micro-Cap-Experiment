name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate portfolio performance summary
      run: |
        python -c "
        import pandas as pd
        import os
        from datetime import datetime
        
        def generate_performance_summary():
            portfolio_file = 'Scripts and CSV Files/chatgpt_portfolio_update.csv'
            if not os.path.exists(portfolio_file):
                return 'No portfolio data available'
                
            df = pd.read_csv(portfolio_file)
            if df.empty:
                return 'Portfolio is empty'
                
            # Get total rows only
            totals = df[df['Ticker'] == 'TOTAL'].copy()
            if totals.empty:
                return 'No performance data available'
                
            totals['Date'] = pd.to_datetime(totals['Date'])
            totals = totals.sort_values('Date')
            
            # Get latest and first entries
            latest = totals.iloc[-1]
            first = totals.iloc[0]
            
            start_equity = first['Total Equity']
            end_equity = latest['Total Equity']
            total_return = ((end_equity - start_equity) / start_equity) * 100
            
            days = (pd.to_datetime(latest['Date']) - pd.to_datetime(first['Date'])).days
            
            # Build summary using string concatenation to avoid f-string issues in YAML
            summary = '## Portfolio Performance Summary\n\n'
            summary += '**Period:** ' + str(first['Date']) + ' to ' + str(latest['Date']) + ' (' + str(days) + ' days)\n'
            summary += '**Starting Equity:** $' + '{:.2f}'.format(start_equity) + '\n'
            summary += '**Ending Equity:** $' + '{:.2f}'.format(end_equity) + '\n'
            summary += '**Total Return:** ' + '{:+.2f}'.format(total_return) + '%\n'
            summary += '**Latest Cash Balance:** $' + '{:.2f}'.format(latest['Cash Balance']) + '\n\n'
            summary += '### Recent Holdings\n'
            
            # Get latest non-total positions
            latest_date = pd.to_datetime(latest['Date'])
            recent_positions = df[
                (pd.to_datetime(df['Date']) == latest_date) & 
                (df['Ticker'] != 'TOTAL') & 
                (~df['Action'].astype(str).str.startswith('SELL'))
            ]
            
            if not recent_positions.empty:
                for _, pos in recent_positions.iterrows():
                    summary += '- **' + str(pos['Ticker']) + '**: ' + str(pos['Shares']) + ' shares @ $' + '{:.2f}'.format(pos['Buy Price']) + ' (Stop: $' + '{:.2f}'.format(pos['Stop Loss']) + ')\\n'
            else:
                summary += 'No active positions\\n'
                
            return summary
        
        summary = generate_performance_summary()
        
        # Write to file for use in release notes
        with open('performance_summary.md', 'w') as f:
            f.write(summary)
        
        print('Performance summary generated')
        "
    
    - name: Generate release body
      run: |
        # Combine performance summary and changelog
        cat performance_summary.md > release_body.md
        echo "" >> release_body.md
        echo "" >> release_body.md
        
        # Get commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" --no-merges)
        else
          COMMITS=$(git log --pretty=format:"- %s" --no-merges ${LAST_TAG}..HEAD)
        fi
        
        echo "## Changes in this release" >> release_body.md
        echo "" >> release_body.md
        echo "$COMMITS" >> release_body.md
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: release_body.md
        draft: false
        prerelease: false
    
    - name: Upload portfolio data as release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: Scripts and CSV Files/chatgpt_portfolio_update.csv
        asset_name: portfolio-data-${{ github.ref_name }}.csv
        asset_content_type: text/csv
