name: Portfolio Health Check

on:
  schedule:
    # Run every weekday at 9:30 AM EST (market open)
    - cron: '30 14 * * 1-5'  # 14:30 UTC = 9:30 EST
  workflow_dispatch:  # Allow manual triggers

permissions:
  contents: write  # Allow workflow to commit and push changes
  issues: write    # Allow creating issues on failure

jobs:
  portfolio-health:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check portfolio data integrity
      run: |
        python -c "
        import pandas as pd
        import os
        from datetime import datetime, timedelta
        
        def check_portfolio_health(csv_path):
            if not os.path.exists(csv_path):
                print(f'‚ùå Portfolio file not found: {csv_path}')
                return False
                
            df = pd.read_csv(csv_path)
            if df.empty:
                print(f'‚ö†Ô∏è  Portfolio is empty: {csv_path}')
                return True
                
            # Check for recent data
            df['Date'] = pd.to_datetime(df['Date'])
            latest_date = df['Date'].max()
            days_old = (datetime.now() - latest_date).days
            
            print(f'üìä Portfolio: {csv_path}')
            print(f'   Latest update: {latest_date.strftime(\"%Y-%m-%d\")} ({days_old} days ago)')
            
            if days_old > 7:
                print(f'‚ö†Ô∏è  Data is {days_old} days old')
            elif days_old > 3:
                print(f'‚ö†Ô∏è  Data is {days_old} days old')
            else:
                print(f'‚úÖ Data is recent')
                
            # Check for TOTAL row
            total_rows = df[df['Ticker'] == 'TOTAL']
            if total_rows.empty:
                print('‚ùå No TOTAL summary row found')
                return False
            else:
                latest_total = total_rows.iloc[-1]
                equity = float(latest_total['Total Equity'])
                cash = float(latest_total['Cash Balance'])
                print(f'   Total Equity: \${equity:.2f}')
                print(f'   Cash Balance: \${cash:.2f}')
                
            return True
        
        # Check both portfolio files
        health_status = []
        health_status.append(check_portfolio_health('Scripts and CSV Files/chatgpt_portfolio_update.csv'))
        health_status.append(check_portfolio_health('Start Your Own/chatgpt_portfolio_update.csv'))
        
        if not all(health_status):
            exit(1)
        print('\\n‚úÖ All portfolio health checks passed')
        "
    
    - name: Validate trading script functionality
      run: |
        python -c "
        from trading_script import generate_chatgpt_prompt, generate_portfolio_summary, generate_market_data
        import pandas as pd
        
        # Test with empty portfolio
        empty_portfolio = pd.DataFrame()
        cash = 100.0
        
        try:
            summary = generate_portfolio_summary(empty_portfolio, cash)
            market_data = generate_market_data()
            prompt = generate_chatgpt_prompt(empty_portfolio, cash)
            
            print('‚úÖ Prompt generation functions work correctly')
            print(f'   Summary length: {len(summary)} characters')
            print(f'   Market data length: {len(market_data)} characters') 
            print(f'   Full prompt length: {len(prompt)} characters')
            
        except Exception as e:
            print(f'‚ùå Error in prompt generation: {e}')
            exit(1)
        "
    
    - name: Generate LLM prompt and call OpenAI API
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python -c "
        import os
        import json
        import requests
        from trading_script import generate_chatgpt_prompt, load_latest_portfolio_state, generate_market_data
        
        # Load current portfolio data
        portfolio_file = 'Scripts and CSV Files/chatgpt_portfolio_update.csv'
        try:
            portfolio, cash = load_latest_portfolio_state(portfolio_file)
            # Convert list to DataFrame if needed
            if isinstance(portfolio, list):
                import pandas as pd
                portfolio = pd.DataFrame(portfolio)
            print(f'üìä Loaded portfolio: {len(portfolio)} positions, \${cash:.2f} cash')
        except Exception as e:
            print(f'‚ö†Ô∏è Could not load portfolio data: {e}')
            print('üìù Using empty portfolio for prompt generation')
            import pandas as pd
            portfolio = pd.DataFrame()
            cash = 100.0
        
        # Generate the complete LLM prompt
        try:
            prompt = generate_chatgpt_prompt(portfolio, cash)
            print(f'‚úÖ Generated prompt: {len(prompt)} characters')
            
            # Save prompt to file for debugging
            with open('generated_prompt.txt', 'w') as f:
                f.write(prompt)
            print('üíæ Prompt saved to generated_prompt.txt')
            
        except Exception as e:
            print(f'‚ùå Error generating prompt: {e}')
            exit(1)
        
        # Call OpenAI API
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print('‚ùå OPENAI_API_KEY not found in environment')
            exit(1)
        
        headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': 'gpt-3.5-turbo',
            'messages': [
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'max_tokens': 2000,
            'temperature': 0.7
        }
        
        try:
            print('ü§ñ Calling OpenAI API...')
            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                llm_response = result['choices'][0]['message']['content']
                
                print(f'‚úÖ OpenAI API call successful')
                print(f'üìù Response length: {len(llm_response)} characters')
                
                # Save LLM response to file
                with open('llm_response.txt', 'w') as f:
                    f.write(llm_response)
                print('üíæ LLM response saved to llm_response.txt')
                
                # Save usage stats
                usage = result.get('usage', {})
                stats = {
                    'timestamp': __import__('datetime').datetime.now().isoformat(),
                    'prompt_tokens': usage.get('prompt_tokens', 0),
                    'completion_tokens': usage.get('completion_tokens', 0),
                    'total_tokens': usage.get('total_tokens', 0),
                    'model': data['model']
                }
                
                with open('api_usage.json', 'w') as f:
                    json.dump(stats, f, indent=2)
                print(f'üìä Token usage: {stats[\"total_tokens\"]} total ({stats[\"prompt_tokens\"]} prompt + {stats[\"completion_tokens\"]} completion)')
                
            else:
                print(f'‚ùå OpenAI API call failed: {response.status_code}')
                print(f'Error: {response.text}')
                exit(1)
                
        except Exception as e:
            print(f'‚ö†Ô∏è Error calling OpenAI API: {e}')
            print('üìù Continuing without LLM analysis...')
            # Create empty files to prevent workflow failure
            with open('llm_response.txt', 'w') as f:
                f.write('LLM analysis skipped due to API error')
            with open('api_usage.json', 'w') as f:
                json.dump({
                    'timestamp': __import__('datetime').datetime.now().isoformat(),
                    'error': str(e),
                    'status': 'skipped'
                }, f, indent=2)
        "
    
    - name: Run automated portfolio update
      run: |
        # Check if it's a weekday (when markets are open)
        if [ $(date +%u) -le 5 ]; then
          echo "üìà Running portfolio update for weekday..."
          # Run the trading script non-interactively
          echo "" | python "Scripts and CSV Files/Trading_Script.py" || echo "‚ö†Ô∏è Trading script completed with warnings"
        else
          echo "üèñÔ∏è Weekend detected, skipping portfolio update"
        fi
    
    - name: Configure git for auto-commits
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions Bot"
    
    - name: Commit updated portfolio data and LLM responses
      run: |
        # Check if there are any changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          echo "üìù Changes detected, committing updates..."
          git add "Scripts and CSV Files/chatgpt_portfolio_update.csv" "Scripts and CSV Files/chatgpt_trade_log.csv" || echo "No CSV changes to add"
          git add generated_prompt.txt llm_response.txt api_usage.json || echo "No LLM files to add"
          
          # Create commit message with current date
          COMMIT_MSG="Automated portfolio update with LLM analysis - $(date '+%Y-%m-%d')"
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          
          # Push changes
          git push || echo "Push failed, possibly no changes"
          echo "‚úÖ Portfolio data committed and pushed"
        else
          echo "‚ÑπÔ∏è No changes detected, nothing to commit"
        fi

  create-issue-on-failure:
    runs-on: ubuntu-latest
    needs: portfolio-health
    if: failure()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create issue on failure
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Portfolio Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `The automated portfolio health check failed on ${new Date().toISOString()}.
          
          Please check:
          - Portfolio data integrity
          - Recent updates to CSV files
          - Trading script functionality
          
          See the [failed workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'automated']
          });
